"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
"use strict";
const react_1 = __importDefault(require("react"));
const react_apollo_1 = require("react-apollo");
const filestack = __importStar(require("filestack-js"));
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const FILE_UPLOAD_INFO_QUERY = graphql_tag_1.default `
  query FileUploadInfo {
    fileUploadInfo {
      policy
      signature
      apiKey
      path
    }
  }
`;
const FileInput = react_apollo_1.withApollo((_a = 
// @ts-ignore
class FileInput extends react_1.default.Component {
        constructor(props) {
            super(props);
            this.onUploadDone = ({ filesUploaded }) => __awaiter(this, void 0, void 0, function* () {
                if (!this.filestack) {
                    return;
                }
                const { policy = '""', signature = '""' } = this.filestack.session;
                let value = filesUploaded.map(({ handle, filename, url }) => {
                    const urlOrigin = url ? new URL(url).origin : '';
                    return {
                        downloadUrl: `${urlOrigin}/security=p:${policy},s:${signature}/${handle}`,
                        fileId: handle,
                        filename,
                        public: !!this.props.public,
                    };
                });
                let originalFile = filesUploaded.map((item) => item.originalFile);
                const { maxFiles, onUploadDone, onChange } = this.props;
                if (maxFiles === 1) {
                    value = value[0];
                    originalFile = originalFile[0];
                }
                if (typeof onUploadDone === 'function') {
                    value = yield onUploadDone(value, originalFile);
                }
                this.setState({ value, originalFile });
                if (typeof onChange === 'function') {
                    onChange(value, originalFile);
                }
            });
            this.collectPickerOptions = () => {
                const { maxFiles } = this.props;
                const { path } = this.state;
                return {
                    exposeOriginalFile: true,
                    maxFiles,
                    onUploadDone: this.onUploadDone,
                    storeTo: {
                        path,
                    },
                };
            };
            this.pick = (options = {}) => __awaiter(this, void 0, void 0, function* () {
                yield this.filestackPromise;
                if (!this.filestack) {
                    return;
                }
                if ('maxFiles' in options) {
                    console.warn('Specify "maxFiles" as a prop for FileInput component'); // tslint:disable-line
                }
                if ('onUploadDone' in options) {
                    console.warn('Specify "onUploadDone" as a prop for FileInput component'); // tslint:disable-line
                }
                const pickerOptions = this.collectPickerOptions();
                const picker = this.filestack.picker(Object.assign({}, options, pickerOptions));
                yield picker.open();
                return picker;
            });
            this.state = {
                error: null,
                originalFile: null,
                path: null,
                value: props.value || null,
            };
        }
        static getDerivedStateFromProps(props, state) {
            let nextState = null;
            if (props.value !== state.value) {
                nextState = { value: props.value };
            }
            return nextState;
        }
        componentDidMount() {
            this.filestackPromise = this.initFilestack();
        }
        initFilestack() {
            return __awaiter(this, void 0, void 0, function* () {
                const { client } = this.props;
                let response = null;
                try {
                    response = yield client.query({ query: FILE_UPLOAD_INFO_QUERY });
                }
                catch (e) {
                    this.setState({ error: e });
                    return;
                }
                const { apiKey, policy, signature, path } = response.data.fileUploadInfo;
                this.setState({ path });
                this.filestack = filestack.init(apiKey, {
                    security: {
                        policy,
                        signature,
                    },
                });
            });
        }
        render() {
            const { children } = this.props;
            const { error, value, originalFile } = this.state;
            return children({ pick: this.pick, value, originalFile, error });
        }
    },
    _a.defaultProps = {
        maxFiles: 1,
        value: null,
    },
    _a));
exports.FileInput = FileInput;
//# sourceMappingURL=FileInput.js.map