"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var filelink_1 = require("./../filelink");
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var request_1 = require("./request");
/**
 *
 * @private
 * @param session
 * @param url
 * @param opts
 * @param token
 * @param security
 */
exports.storeURL = function (session, url, opts, token, security) {
    if (!url || typeof url !== 'string') {
        throw new Error('url is required for storeURL');
    }
    session.policy = security && security.policy || session.policy;
    session.signature = security && security.signature || session.signature;
    var baseURL = new filelink_1.Filelink(url, session.apikey);
    baseURL.setCname(session.cname);
    // baseURL.setBase64(true); // Enable it after fix in mocks
    if (session.urls.cdnUrl.indexOf('localhost') > -1 || session.urls.cdnUrl.indexOf('badurl') > -1) {
        baseURL.setCustomDomain(session.urls.cdnUrl);
    }
    if (session.policy && session.signature) {
        baseURL.security({
            policy: session.policy,
            signature: session.signature,
        });
    }
    baseURL.store(opts);
    // const baseURL = transform(session, url, {
    //   store : opts || {},
    // });
    return new Promise(function (resolve, reject) {
        var req = request_1.request.get(baseURL.toString());
        if (token) {
            token.cancel = function () {
                req.abort();
                reject(new Error('Upload cancelled'));
            };
        }
        return req.then(function (res) {
            if (res.body && res.body.url) {
                var handle = res.body.url.split('/').pop();
                var response = tslib_1.__assign({}, res.body, { handle: handle, mimetype: res.body.type });
                return resolve(response);
            }
            return resolve(res.body);
        }).catch(function (err) {
            reject(err);
        });
    });
};
