"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var t = require("./transform");
var abab_1 = require("abab");
var session = ENV.session;
var secureSession = ENV.secureSession;
var cdnUrl = session.urls.cdnUrl;
describe('transform', function () {
    var transform = function (url, options, b64) {
        if (b64 === void 0) { b64 = false; }
        return t.transform(session, url, options, b64);
    };
    var transformSecure = function (url, options, b64) {
        if (b64 === void 0) { b64 = false; }
        return t.transform(secureSession, url, options, b64);
    };
    var url = ENV.filelink;
    it('should throw an error if invalid options are provided', function () {
        assert.throws(function () { return transform(url, { invalidKey: 'ignored' }); });
    });
    it('should construct URL parameters from specified transforms', function () {
        var testConfig = {
            vignette: {
                amount: 100,
                blurmode: 'linear',
            },
            shadow: {
                blur: 10,
                opacity: 35,
                vector: [25, 25],
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/vignette=amount:100,blurmode:linear/shadow=blur:10,opacity:35,vector:[25,25]/" + url;
        assert.equal(result, expected);
    });
    it('should construct URL parameters properly with primitive options', function () {
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
            compress: false,
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/polaroid/flop/" + url;
        assert.equal(result, expected);
    });
    it('should construct URL with security properly', function () {
        var testConfig = {
            polaroid: true,
        };
        var result = transformSecure(url, testConfig);
        var expected = cdnUrl + "/" + secureSession.apikey + "/polaroid/security=policy:" + secureSession.policy + ",signature:" + secureSession.signature + "/" + url;
        assert.equal(result, expected);
    });
    it('should return base url if there are no transforms', function () {
        var testConfig = {};
        var result = transform(url, testConfig);
        assert.equal(result, cdnUrl + "/" + session.apikey + "/" + url);
    });
    it('should return flatten nested options array', function () {
        var testConfig = {
            partial_pixelate: {
                objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/" + url;
        assert.equal(result, expected);
    });
    it('should handle camelCased params', function () {
        var testConfig = {
            partialPixelate: {
                objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/" + url;
        assert.equal(result, expected);
    });
    it('should handle storage with url handle', function () {
        var storeAlias = 'https://test.com/file.js';
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
        };
        var result = transform(storeAlias, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/polaroid/flop/\"" + storeAlias + "\"";
        assert.equal(result, expected);
    });
    it('should handle storage with http url handle', function () {
        var storeAlias = 'http://test.com/file.js';
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
        };
        var result = transform(storeAlias, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/polaroid/flop/\"" + storeAlias + "\"";
        assert.equal(result, expected);
    });
    it('should throw exception when storage alias is provided without apikey', function () {
        var sessionCopy = JSON.parse(JSON.stringify(session));
        sessionCopy.apikey = null;
        var testConfig = {};
        assert.throws(function () { return t.transform(sessionCopy, 'src:test', testConfig); });
    });
    it('should handle store aliases', function () {
        var storeAlias = 'src://my-s3/mydoc.pdf';
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
        };
        var result = transform(storeAlias, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/polaroid/flop/\"" + storeAlias + "\"";
        assert.equal(result, expected);
    });
    it('should validate float ranges in options', function () {
        var testConfig = {
            detect_faces: {
                minsize: 0.2,
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/detect_faces=minsize:0.2/" + url;
        assert.equal(result, expected);
    });
    it('should return base url with handle if there is empty transform option', function () {
        var testConfig = {
            polaroid: {},
        };
        var result = transform(url, testConfig);
        assert.equal(result, cdnUrl + "/" + session.apikey + "/polaroid/" + url);
    });
    it('should handle store without params', function () {
        var options = {};
        var result = transform(url, { store: options });
        assert.equal(result, cdnUrl + "/" + session.apikey + "/store/" + url);
    });
    it('should return correct store URL with "/" in path', function () {
        var options = { filename: 'test.jpg', path: 'test/path' };
        var result = transform(url, { store: options });
        assert.equal(result, cdnUrl + "/" + session.apikey + "/store=filename:test.jpg,path:\"test/path\"/" + url);
    });
    it('should handle upper cased path', function () {
        var options = { filename: 'test.jpg', path: 'tEsT/path' };
        var result = transform(url, { store: options });
        assert.equal(result, cdnUrl + "/" + session.apikey + "/store=filename:test.jpg,path:\"tEsT/path\"/" + url);
    });
    describe('blackwhite', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                blackwhite: {
                    threshold: 100,
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/blackwhite=threshold:100/" + url;
            assert.equal(result, expected);
        });
    });
    describe('crop', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                crop: {
                    dim: [0, 0, 200, 200],
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/crop=dim:[0,0,200,200]/" + url;
            assert.equal(result, expected);
        });
    });
    describe('rotate', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                rotate: {
                    deg: 'exif',
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/rotate=deg:exif/" + url;
            assert.equal(result, expected);
        });
    });
    describe('output', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                output: {
                    background: 'black',
                    density: 250,
                    compress: true,
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/output=background:black,density:250,compress:true/" + url;
            assert.equal(result, expected);
        });
    });
    describe('cache', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                cache: false,
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/cache=false/" + url;
            assert.equal(result, expected);
            var testConfig2 = {
                cache: {
                    expiry: 12345,
                },
            };
            var result2 = transform(url, testConfig2);
            var expected2 = cdnUrl + "/" + session.apikey + "/cache=expiry:12345/" + url;
            assert.equal(result2, expected2);
        });
    });
    describe('compress', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                compress: true,
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/compress/" + url;
            assert.equal(result, expected);
        });
    });
});
describe('transform b64', function () {
    var transform = function (url, options, b64) {
        if (b64 === void 0) { b64 = true; }
        return t.transform(session, url, options, b64);
    };
    var transformSecure = function (url, options, b64) {
        if (b64 === void 0) { b64 = true; }
        return t.transform(secureSession, url, options, b64);
    };
    var url = ENV.filelink;
    it('should throw an error if invalid options are provided', function () {
        assert.throws(function () { return transform(url, { invalidKey: 'ignored' }); });
    });
    it('should construct URL parameters from specified transforms', function () {
        var testConfig = {
            vignette: {
                amount: 100,
                blurmode: 'linear',
            },
            shadow: {
                blur: 10,
                opacity: 35,
                vector: [25, 25],
            },
        };
        var result = transform(url, testConfig, true);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'vignette',
                params: {
                    amount: 100,
                    blurmode: 'linear',
                },
            }, {
                name: 'shadow',
                params: {
                    blur: 10,
                    opacity: 35,
                    vector: [25, 25],
                },
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should construct URL parameters properly with primitive options', function () {
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
            compress: false,
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'polaroid',
            },
            {
                name: 'flop',
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should construct URL with security properly', function () {
        var testConfig = {
            polaroid: true,
        };
        var result = transformSecure(url, testConfig);
        var expected = cdnUrl + "/" + secureSession.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'polaroid',
            },
            {
                name: 'security',
                params: {
                    policy: secureSession.policy,
                    signature: secureSession.signature,
                },
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should return base url if there are no transforms', function () {
        var testConfig = {};
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should return flatten nested options array', function () {
        var testConfig = {
            partial_pixelate: {
                objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'partial_pixelate',
                params: {
                    objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
                },
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should handle camelCased params', function () {
        var testConfig = {
            partialPixelate: {
                objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'partial_pixelate',
                params: {
                    objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
                },
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should handle transform with url handle', function () {
        var storeAlias = 'https://test.com/file.js';
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
        };
        var result = transform(storeAlias, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'polaroid',
            }, {
                name: 'flop',
            },
        ])) + "/b64://" + abab_1.btoa(storeAlias);
        assert.equal(result, expected);
    });
    it('should handle store aliases', function () {
        var storeAlias = 'src://my-s3/mydoc.pdf';
        var testConfig = {
            polaroid: true,
            flip: false,
            flop: true,
        };
        var result = transform(storeAlias, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'polaroid',
            }, {
                name: 'flop',
            },
        ])) + "/b64://" + abab_1.btoa(storeAlias);
        assert.equal(result, expected);
    });
    it('should validate float ranges in options', function () {
        var testConfig = {
            detect_faces: {
                minsize: 0.2,
            },
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'detect_faces',
                params: {
                    minsize: 0.2,
                },
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should return base url with handle if there is empty transform option', function () {
        var testConfig = {
            polaroid: {},
        };
        var result = transform(url, testConfig);
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'polaroid',
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should handle store without params', function () {
        var options = {};
        var result = transform(url, { store: options });
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'store',
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should return correct store URL with "/" in path', function () {
        var options = { filename: 'test.jpg', path: 'test/path' };
        var result = transform(url, { store: options });
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'store',
                params: options,
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    it('should handle upper cased path', function () {
        var options = { filename: 'test.jpg', path: 'tEsT/path ' };
        var result = transform(url, { store: options });
        var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
            {
                name: 'store',
                params: options,
            },
        ])) + "/b64://" + abab_1.btoa(url);
        assert.equal(result, expected);
    });
    describe('blackwhite', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                blackwhite: {
                    threshold: 100,
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'blackwhite',
                    params: {
                        threshold: 100,
                    },
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
        });
    });
    describe('crop', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                crop: {
                    dim: [0, 0, 200, 200],
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'crop',
                    params: {
                        dim: [0, 0, 200, 200],
                    },
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
        });
    });
    describe('rotate', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                rotate: {
                    deg: 'exif',
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'rotate',
                    params: {
                        deg: 'exif',
                    },
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
        });
    });
    describe('output', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                output: {
                    background: 'black',
                    density: 250,
                    compress: true,
                },
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'output',
                    params: {
                        background: 'black',
                        density: 250,
                        compress: true,
                    },
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
        });
    });
    describe('cache', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                cache: false,
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'cache',
                    params: false,
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
            var testConfig2 = {
                cache: {
                    expiry: 12345,
                },
            };
            var result2 = transform(url, testConfig2);
            var expected2 = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'cache',
                    params: {
                        expiry: 12345,
                    },
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result2, expected2);
        });
    });
    describe('compress', function () {
        it('should construct valid parameters', function () {
            var testConfig = {
                compress: true,
            };
            var result = transform(url, testConfig);
            var expected = cdnUrl + "/" + session.apikey + "/b64/" + abab_1.btoa(JSON.stringify([
                {
                    name: 'compress',
                },
            ])) + "/b64://" + abab_1.btoa(url);
            assert.equal(result, expected);
        });
    });
});
